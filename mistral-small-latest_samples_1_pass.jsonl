{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()  # sort the list to make comparison easier\n    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")\n    groups = []\n    current_group = \"\"\n\n    for char in paren_string:\n        if char == \"(\":\n            current_group += char\n        elif char == \")\":\n            current_group += char\n            if balance_parentheses(current_group):\n                groups.append(current_group)\n                current_group = \"\"\n            else:\n                current_group = current_group[:-1]\n        else:\n            raise ValueError(\"Invalid character in input\")\n\n    if current_group:\n        raise ValueError(\"Unbalanced parentheses in input\")\n\n    return groups\n\ndef balance_parentheses(group: str) -> bool:\n    count = 0\n    for char in group:\n        if char == \"(\":\n            count += 1\n        elif char == \")\":\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    an integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    # The modulo operator (%) returns the remainder of division\n    return number % 1"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    # Calculate the mean of the numbers\n    mean = sum(numbers) / len(numbers)\n\n    # Calculate the absolute deviation of each number from the mean\n    abs_deviations = [abs(x - mean) for x in numbers]\n\n    # Calculate the mean of the absolute deviations\n    mad = sum(abs_deviations) / len(numbers)\n\n    return mad"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = [numbers[0]]\n    for num in numbers[1:]:\n        result.append(delimeter)\n        result.append(num)\n    return result"}
{"task_id": "HumanEval/6", "completion": "import re\nfrom typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    pattern = r'\\(([^()]*)\\)'\n    groups = re.findall(pattern, paren_string)\n    max_depths = []\n\n    for group in groups:\n        stack = []\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                stack.append(char)\n                max_depth = max(max_depth, len(stack))\n            elif char == ')':\n                stack.pop()\n\n        max_depths.append(max_depth)\n\n    return max_depths"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"Filter an input list of strings only for ones that contain given substring\"\"\"\n    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_val = 0\n    product_val = 1\n    for num in numbers:\n        sum_val += num\n        product_val *= num\n    return sum_val, product_val"}
{"task_id": "HumanEval/9", "completion": "from collections import deque\nfrom typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = deque(maxlen=len(numbers))\n    max_so_far.append(numbers[0])\n    result = [max_so_far[0]]\n    for num in numbers[1:]:\n        max_so_far.append(num)\n        while max_so_far[0] < num:\n            max_so_far.popleft()\n        result.append(max_so_far[0])\n    return result"}
{"task_id": "HumanEval/10", "completion": "def make_palindrome(string: str) -> str:\n    if is_palindrome(string):\n        return string\n\n    longest_suffix = \"\"\n    for i in range(len(string) - 1, -1, -1):\n        current_suffix = string[i:]\n        if is_palindrome(current_suffix):\n            longest_suffix = current_suffix\n            break\n\n    return longest_suffix + longest_suffix[:len(longest_suffix) - len(string)][:-1]"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    result = \"\"\n    for i in range(min(len(a), len(b))):\n        result += str(int(a[i]) ^ int(b[i]))\n    return result"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n    None\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    else:\n        max_length = max(len(s) for s in strings)\n        return next((s for s in strings if len(s) == max_length), None)"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return abs(a)"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    sequence = [str(i) for i in range(n + 1)]\n    return ' '.join(sequence)"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    beat_values = {'o': 4, 'o|': 2, '.|': 1}\n    parsed_music = [beat_values[note] for note in music_string.split()]\n    return parsed_music"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    i = 0\n    while i < len(string) - len(substring) + 1:\n        if string[i:i+len(substring)] == substring:\n            count += 1\n        i += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    number_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    numbers_list = numbers.split()\n    numbers_list = [number_map[word] for word in numbers_list]\n    numbers_list = sorted(numbers_list)\n    sorted_numbers = ' '.join([number_map[str(num)] for num in numbers_list])\n\n    return sorted_numbers\n\n# Test case\nprint(sort_numbers('three one five'))  # Output: 'one three five'"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = None\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    if not numbers or len(numbers) < 2:\n        raise ValueError(\"Input list should have at least two elements\")\n\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        raise ValueError(\"All numbers in the list are the same\")\n\n    rescaled_numbers = [(num - min_num) / (max_num - min_num) for num in numbers]\n    return rescaled_numbers"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    filtered_values = [value for value in values if isinstance(value, int)]\n    return filtered_values"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\"\n    Return length of the given string.\n\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    # Start from n-1 and work our way down to 1\n    for i in range(n-1, 0, -1):\n        # If the number is divisible by i, return i\n        if n % i == 0:\n            return i\n    # If no divisors were found, it means n is prime\n    return 1"}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    flipped_string = \"\"\n    for char in string:\n        if char.islower():\n            flipped_string += char.upper()\n        elif char.isupper():\n            flipped_string += char.lower()\n        else:\n            flipped_string += char  # If the character is not a letter, keep it as is\n    return flipped_string"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\"\n    Concatenate all strings in the given list into a single string.\n\n    Args:\n        strings (List[str]): A list of strings to be concatenated.\n\n    Returns:\n        str: A single string formed by concatenating all strings in the given list.\n\n    Examples:\n        >>> concatenate([])\n        ''\n        >>> concatenate(['a', 'b', 'c'])\n        'abc'\n    \"\"\"\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [num for num in l if num > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/32", "completion": "import math\nfrom scipy.optimize import bisect\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 != 0 or xs[-1] == 0:\n        raise ValueError(\"xs must have an even number of coefficients and the largest non-zero coefficient must be positive.\")\n\n    # Find a range where the polynomial changes sign\n    left = -10\n    right = 10\n    while poly(xs, left) * poly(xs, right) > 0:\n        left *= 2\n        right *= 2\n\n    # Use bisection method to find a zero\n    zero = bisect(poly, left, right, args=xs, xtol=1e-9, maxiter=100)\n\n    return zero"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    # Create a copy of the list\n    l_copy = l[:]\n\n    # Find the indices that are divisible by three\n    third_indices = [i for i in range(len(l)) if i % 3 == 0]\n\n    # Sort the values at the third indices\n    sorted_third = sorted(l_copy[i] for i in third_indices)\n\n    # Replace the values at the third indices in the original list with the sorted values\n    for i, value in zip(third_indices, sorted_third):\n        l_copy[i] = value\n\n    return l_copy"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(list(set(l)))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(11, n, 11):\n        if i % 13 == 0:\n            num_str = str(i)\n            count += num_str.count('7')\n    for i in range(13, n, 13):\n        if i % 11 == 0:\n            num_str = str(i)\n            count += num_str.count('7')\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    even_elements = [l[i] for i in even_indices]\n    sorted_even_elements = sorted(even_elements)\n\n    for i, even_element in zip(even_indices, sorted_even_elements):\n        l[i] = even_element\n\n    return l"}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "def fibonacci(n: int):\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b\n\ndef is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    count = 0\n    num = 0\n    while count < n:\n        num = fibonacci(count + 1)\n        if is_prime(num):\n            count += 1\n    return num"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    # Use a dictionary to store the elements of the list as keys and their indices as values\n    num_dict = {}\n    for i, num in enumerate(l):\n        if num not in num_dict:\n            num_dict[num] = []\n        num_dict[num].append(i)\n\n    # Iterate through the list and check if there are two other numbers that sum to the negative of the current number\n    for num in l:\n        if -num in num_dict and num_dict[-num] != num_dict[num]:\n            # If there are two other numbers that sum to the negative of the current number, check if their indices are distinct\n            for other_num in num_dict[-num]:\n                if other_num != num_dict[num][0] and other_num != num_dict[num][1]:\n                    return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n    \"\"\"\n    This function calculates the number of collisions when n cars are moving left to right\n    and another n cars are moving right to left.\n    \"\"\"\n    return n"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    num_set = set()\n    for num in l:\n        if num == 0:\n            return True\n        if -num in num_set:\n            return True\n        num_set.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return '0'\n    if base < 2 or base > 10:\n        raise ValueError(\"Base must be between 2 and 10\")\n\n    digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    result = []\n\n    while x > 0:\n        x, remainder = divmod(x, base)\n        result.append(digits[remainder])\n\n    return ''.join(result[::-1])"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    \"\"\"Given length of a side and height return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n\n    fib4_seq = [0, 0, 2, 0]\n    if n < 4:\n        return fib4_seq[n]\n\n    for _ in range(4, n + 1):\n        fib4_seq.append(fib4_seq[-1] + fib4_seq[-2] + fib4_seq[-3] + fib4_seq[-4])\n\n    return fib4_seq[-1]\n\n# Test cases\nprint(fib4(5))  # Output: 4\nprint(fib4(6))  # Output: 8\nprint(fib4(7))  # Output: 14"}
{"task_id": "HumanEval/47", "completion": "def median(l: list) -> float:\n    \"\"\"Return median of elements in the list l.\n\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    l.sort()\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    text = text.lower() # make the string lowercase to ignore case\n    text = ''.join(c for c in text if c.isalnum()) # remove non-alphanumeric characters\n    return text == text[::-1] # check if the string is equal to its reverse"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    result = 1\n    power = 2\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * power) % p\n        power = (power * power) % p\n        n //= 2\n    return result"}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "import string\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    \"\"\"\n    vowels = set(string.ascii_lowercase) - set('bcdfghjklmnpqrstvwxyz')\n    return ''.join(char for char in text if char.lower() not in vowels)\n\n# Test cases\nprint(remove_vowels(''))\nprint(remove_vowels(\"abcdef\\nghijklm\"))\nprint(remove_vowels('abcdef'))\nprint(remove_vowels('aaaaa'))\nprint(remove_vowels('aaBAA'))\nprint(remove_vowels('zbcd'))"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "result = add(2, 3)\nprint(result)  # Output: 5"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    # Remove duplicates from strings and sort characters\n    s0_set = set(s0)\n    s1_set = set(s1)\n    s0_sorted = sorted(list(s0_set))\n    s1_sorted = sorted(list(s1_set))\n\n    # Check if the sorted sets are equal\n    return s0_sorted == s1_sorted"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>' and stack:\n            stack.pop()\n        elif bracket == '>' and not stack:\n            return False\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "def monotonic(lst: list):\n    if not lst:\n        return False\n\n    direction = lst[1] > lst[0]\n\n    for i in range(2, len(lst)):\n        if (lst[i] > lst[i-1]) != direction:\n            return False\n\n    return True"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Convert both lists to sets to remove duplicates and find common elements\n    common_elements = set(l1) & set(l2)\n    # Convert the set back to a list and sort it\n    sorted_common_elements = sorted(list(common_elements))\n    # Return the sorted list of common elements\n    return sorted_common_elements"}
{"task_id": "HumanEval/59", "completion": "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef largest_prime_factor(n: int) -> int:\n    if is_prime(n):\n        raise ValueError(\"n must not be a prime number\")\n    i = n // 2\n    while True:\n        if is_prime(i):\n            if n % i == 0:\n                return i\n        i -= 1"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack or stack.pop() != '(':\n                return False\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    \"\"\"\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n    if not xs:\n        return []\n    else:\n        return [c * (i + 1) for i, c in enumerate(xs[:-1])]"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n\n    fib_fib = [0, 0, 1] + [None] * (n - 2)\n\n    for i in range(3, n + 1):\n        fib_fib[i] = fib_fib[i - 1] + fib_fib[i - 2] + fib_fib[i - 3]\n\n    return fib_fib[n]"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    vowels = 'aeiouyAEIOUY'\n    count = 0\n    if s and s[-1] in vowels and s[-1] == 'y':  # check if 'y' is at the end of the word\n        count += 1\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n\n# Add more test cases\nprint(vowels_count(\"abcde\"))  # Output: 2\nprint(vowels_count(\"ACEDY\"))  # Output: 3\nprint(vowels_count(\"hello\"))  # Output: 2\nprint(vowels_count(\"Python\"))  # Output: 2\nprint(vowels_count(\"yellow\"))  # Output: 3\nprint(vowels_count(\"YES\"))  # Output: 2\n"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    # convert the integer to a string\n    x_str = str(x)\n    # calculate the number of shifts that will actually occur\n    num_shifts = shift % len(x_str)\n    # shift the digits to the right\n    shifted_str = x_str[num_shifts:] + x_str[:num_shifts]\n    # return the result as a string\n    return shifted_str\n\n# test cases\nprint(circular_shift(12, 1))  # \"21\"\nprint(circular_shift(12, 2))  # \"12\"\nprint(circular_shift(1234, 3))  # \"4123\"\nprint(circular_shift(1234, 5))  # \"3412\"\nprint(circular_shift(1234, 10)) # \"2341\""}
{"task_id": "HumanEval/66", "completion": "Here is a possible implementation of the `digitSum` function in Python:\n"}
{"task_id": "HumanEval/67", "completion": "import re\n\ndef fruit_distribution(s, n):\n    \"\"\"\n    This function calculates the number of mango fruits in a basket,\n    given a string containing the number of apples and oranges and\n    an integer representing the total number of fruits in the basket.\n\n    Parameters:\n    s (str): A string containing the number of apples and oranges in the format \"x apples and y oranges\".\n    n (int): The total number of fruits in the basket.\n\n    Returns:\n    int: The number of mango fruits in the basket.\n    \"\"\"\n    # Extract the number of apples and oranges from the string\n    match = re.search(r'(\\d+)\\s+apples\\s+and\\s+(\\d+)\\s+oranges', s)\n    if not match:\n        raise ValueError(\"Invalid input string format.\")\n\n    apples = int(match.group(1))\n    oranges = int(match.group(2))\n\n    # Calculate the number of mango fruits\n    mangoes = n - apples - oranges\n    return mangoes"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    smallest_even = float('inf')\n    smallest_even_index = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even:\n            smallest_even = num\n            smallest_even_index = i\n    if smallest_even != float('inf'):\n        return [smallest_even, smallest_even_index]\n    else:\n        return []"}
{"task_id": "HumanEval/70", "completion": "Here is one possible implementation of the `strange_sort_list` function:\n"}
{"task_id": "HumanEval/71", "completion": "import math\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    # Check if the sides form a valid triangle\n    if (a + b > c) and (a + c > b) and (b + c > a):\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        # Round the area to 2 decimal points\n        return round(area, 2)\n    else:\n        return -1\n"}
{"task_id": "HumanEval/72", "completion": "def is_palindrome(lst):\n    return lst == lst[::-1]\n\ndef will_it_fly(q, w):\n    if not isinstance(q, list) or not isinstance(w, (int, float)):\n        return False\n\n    if not is_palindrome(q):\n        return False\n\n    if sum(q) > w:\n        return False\n\n    return True"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    count = 0\n    left = 0\n    right = len(arr) - 1\n\n    while left < right:\n        if arr[left] != arr[right]:\n            count += 1\n            # We only need to change one of the elements, so we can choose to change the left one.\n            arr[left] = arr[right]\n        left += 1\n        right -= 1\n\n    # If the length of the array is odd, we need to check the middle element.\n    if len(arr) % 2 == 1:\n        count += arr[left] not in arr[:left]\n\n    return count"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    total_chars1 = sum(len(s) for s in lst1)\n    total_chars2 = sum(len(s) for s in lst2)\n\n    if total_chars1 < total_chars2:\n        return lst1\n    elif total_chars1 > total_chars2:\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/75", "completion": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef is_multiply_prime(a):\n    if a < 3:\n        return False\n    count = 0\n    i = 2\n    while i * i * i <= a:\n        if a % i == 0:\n            if is_prime(i):\n                count += 1\n                a //= i\n            else:\n                break\n        else:\n            i += 1\n    if count == 3 and is_prime(a):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/76", "completion": "import math\n\ndef is_simple_power(x, n):\n    if x < 1 or n < 1 or n != math.floor(n):\n        return False\n\n    power = 1\n    while power < x:\n        power *= n\n\n    return power == x"}
{"task_id": "HumanEval/77", "completion": "import math\n\ndef iscube(a):\n    '''\n    Returns True if the integer a is a cube of some integer number.\n    '''\n    if a == 0:\n        return True\n    elif a < 0:\n        # check if -a is a cube, since (-n)^3 = -n^3\n        return iscube(-a)\n    else:\n        # take the cube root of a and check if it's an integer\n        cbrt_a = math.cbrt(a)\n        return cbrt_a.is_integer()"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for char in num:\n        if char in prime_hex_digits:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    \"\"\"Converts a decimal number to binary format and returns a string.\n\n    Args:\n        decimal (int): The decimal number to be converted.\n\n    Returns:\n        str: The binary representation of the decimal number, with 'db' at the beginning and end.\n\n    Examples:\n        decimal_to_binary(15)   # returns \"db1111db\"\n        decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    binary_string = \"db{:08b}db\".format(decimal)\n    return binary_string"}
{"task_id": "HumanEval/80", "completion": "Here is one possible implementation for the `is_happy` function:\n"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef prime_length(string):\n    length = len(string)\n    return is_prime(length)\n\n# Test cases\nassert prime_length('Hello') == True\nassert prime_length('abcdcba') == True\nassert prime_length('kittens') == True\nassert prime_length('orange') == False"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer.\")\n\n    # The number of n-digit numbers that start with 1\n    start_with_one = 9 * (10 ** (n - 1))\n\n    # The number of n-digit numbers that end with 1\n    end_with_one = 10 ** (n - 1)\n\n    # Add the counts and return the result\n    return start_with_one + end_with_one"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    binary_sum = 0\n    while N > 0:\n        binary_sum += N % 2\n        N //= 2\n    return bin(binary_sum)[2:]"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst, add the even elements that are at odd indices.\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 12\n    \"\"\"\n    total = 0\n    for i in range(len(lst)):  # Loop through the indices of the list\n        if i % 2 != 0 and lst[i] % 2 == 0:  # Check if the index is odd and the element is even\n            total += lst[i]  # Add the element to the total\n    return total"}
{"task_id": "HumanEval/86", "completion": "import re\n\ndef anti_shuffle(s):\n    # Split the input string into words\n    words = re.findall(r'\\w+', s)\n\n    # Apply the anti-shuffle operation to each word\n    anti_shuffled_words = [\"\".join(sorted(word)) for word in words]\n\n    # Join the anti-shuffled words back together with the original spaces\n    anti_shuffled_sentence = \" \".join(anti_shuffled_words)\n\n    # Add back the non-alphanumeric characters in their original positions\n    non_alphanumeric_chars = re.findall(r'\\W', s)\n    for i, char in enumerate(non_alphanumeric_chars):\n        anti_shuffled_sentence = anti_shuffled_sentence[:i] + char + anti_shuffled_sentence[i:]\n\n    return anti_shuffled_sentence"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        indices = [j for j, value in enumerate(row[::-1]) if value == x]\n        result.extend((i, len(row) - 1 - idx) for idx in indices)\n    return result"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return []\n\n    first_last_sum = array[0] + array[-1]\n    sorted_array = array[:]  # create a copy of the array\n\n    if first_last_sum % 2 == 1:\n        sorted_array.sort()  # sort in ascending order\n    else:\n        sorted_array.sort(reverse=True)  # sort in descending order\n\n    return sorted_array"}
{"task_id": "HumanEval/89", "completion": "import string\n\ndef encrypt(s):\n    alphabet = string.ascii_lowercase\n    shifted_alphabet = alphabet[2:] + alphabet[:2]\n    encrypted_chars = [shifted_alphabet[alphabet.index(char)] for char in s if char in alphabet]\n    return ''.join(encrypted_chars)\n\n# Test cases\nprint(encrypt('hi'))  # lm\nprint(encrypt('asdfghjkl'))  # ewhjklnop\nprint(encrypt('gf'))  # kj\nprint(encrypt('et'))  # ix"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n\n    smallest = lst[0]\n    second_smallest = float('inf')\n\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n\n    if second_smallest == float('inf'):\n        return None\n    else:\n        return second_smallest"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    import re\n\n    # Split the string into sentences using the provided delimiters\n    sentences = re.split(r'[.!?]', S)\n\n    # Remove any empty strings that resulted from the split\n    sentences = [sentence for sentence in sentences if sentence.strip()]\n\n    # Count the number of sentences that start with \"I\"\n    boredoms = sum(sentence.startswith('I') for sentence in sentences)\n\n    return boredoms"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    return x == y + z or y == x + z or z == x + y"}
{"task_id": "HumanEval/93", "completion": "import string\n\ndef encode(message):\n    vowels = set(string.ascii_lowercase) - set(string.ascii_uppercase)\n    vowel_mapping = {v: string.ascii_lowercase[(string.ascii_lowercase.index(v) + 2) % len(string.ascii_lowercase)] for v in vowels}\n\n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                encoded_message += vowel_mapping.get(char, char.swapcase())\n            else:\n                encoded_message += vowel_mapping.get(char.lower(), char.swapcase()).upper()\n        else:\n            encoded_message += char\n\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "import sympy\n\ndef find_largest_prime_digit_sum(lst):\n    max_prime = -1\n    for num in lst:\n        if num > 1 and sympy.isprime(num) and num > max_prime:\n            max_prime = num\n\n    if max_prime == -1:\n        return 0\n\n    digit_sum = sum(int(digit) for digit in str(max_prime))\n    return digit_sum\n\n# Test cases\nlst1 = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\nlst2 = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\nlst3 = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\nlst4 = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\nlst5 = [0,81,12,3,1,21]\nlst6 = [0,8,1,2,1,7]\n\nprint(find_largest_prime_digit_sum(lst1))  # Output: 10\nprint(find_largest_prime_digit_sum(lst2))  # Output: 25\nprint(find_largest_prime_digit_sum(lst3))  # Output: 13\nprint(find_largest_prime_digit_sum(lst4))  # Output: 11\nprint(find_largest_prime_digit_sum(lst5))  # Output: 3\nprint(find_largest_prime_digit_sum(lst6))  # Output: 7"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dct):\n    if not dct:\n        return False\n\n    first_key = list(dct.keys())[0]\n    is_lower = first_key.islower()\n    is_upper = first_key.isupper()\n\n    if not (is_lower or is_upper):\n        return False\n\n    return all(k.islower() == is_lower for k in dct.keys())"}
{"task_id": "HumanEval/96", "completion": "Here is a possible implementation of the `count_up_to` function:\n"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    \"\"\"\n    This function takes two integers and returns the product of their unit digits.\n    \"\"\"\n    # Get the unit digits of the input numbers\n    unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n\n    # Multiply the unit digits and return the result\n    return unit_digit_a * unit_digit_b"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    uppercase_vowels = {'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    for i, char in enumerate(s):\n        if i % 2 == 0 and char.isupper() and char in uppercase_vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "import math\n\ndef closest_integer(value):\n    try:\n        num = float(value)\n    except ValueError:\n        return \"Invalid input. Please enter a number.\"\n\n    rounded_num = math.copysign(1, num) * math.ceil(math.fabs(num))\n    return int(rounded_num)\n\n# Test cases\nprint(closest_integer(\"10\"))\nprint(closest_integer(\"15.3\"))\nprint(closest_integer(\"14.5\"))\nprint(closest_integer(\"-14.5\"))"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    pile = []\n    current_stones = n\n    pile.append(current_stones)\n    while current_stones > 1:\n        if current_stones % 2 == 0:\n            current_stones += 1\n        current_stones += 2\n        pile.append(current_stones)\n    return pile\n\n# Test cases:\nassert make_a_pile(3) == [3, 5, 7]\nassert make_a_pile(4) == [4, 6, 8, 10]\nassert make_a_pile(5) == [5, 7, 9, 11, 13]\nassert make_a_pile(6) == [6, 8, 10, 12, 14, 16]"}
{"task_id": "HumanEval/101", "completion": "import re\n\ndef words_string(s):\n    \"\"\"\n    Splits the given string into words and returns an array of the words.\n\n    Args:\n        s (str): The input string of words separated by commas or spaces.\n\n    Returns:\n        list: A list of words from the input string.\n\n    Example:\n        words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n        words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    # Use a regular expression to split the input string into words\n    words = re.findall(r'\\w+', s)\n\n    return words"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    if not (isinstance(x, int) and isinstance(y, int) and x > 0 and y > 0):\n        raise ValueError(\"Both x and y must be positive integers.\")\n\n    if x > y:\n        x, y = y, x\n\n    biggest_even = -1\n    for num in range(x, y + 1):\n        if num % 2 == 0:\n            biggest_even = num\n\n    return biggest_even"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = sum(range(n, m+1))\n    avg = round(total / (m - n + 1))\n    binary = format(avg, '0b')\n    return binary"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    result = []\n    for num in x:\n        if all(digit % 2 != 0 for digit in str(num)):\n            result.append(num)\n    return sorted(result)"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    names = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = sorted([num for num in arr if 0 < num < 10])\n    reversed_arr = sorted_arr[::-1]\n    result = [names[num] for num in reversed_arr]\n    return result"}
{"task_id": "HumanEval/106", "completion": "import math\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"task_id": "HumanEval/107", "completion": "def is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef count_palindromes(start, end):\n    count_even, count_odd = 0, 0\n    for i in range(start, end+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n    return count_even, count_odd\n\ndef even_odd_palindrome(n):\n    return count_palindromes(1, n)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        # convert num to absolute value and then to string\n        num_str = str(abs(num))\n        # check if the sum of digits is greater than 0\n        if sum(int(digit) for digit in num_str) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if not arr:\n        return True\n\n    # Find the minimum element in the array\n    min_elem = min(arr)\n    # Find the index of the minimum element in the array\n    min_index = arr.index(min_elem)\n\n    # If the minimum element is already at the first position, the array is already sorted\n    if min_index == 0:\n        return True\n\n    # Create a new array by shifting the elements of the original array to the right\n    shifted_arr = arr[min_index:] + arr[:min_index]\n\n    # If the shifted array is sorted, we can obtain the sorted array by performing the right shift operation\n    if shifted_arr == sorted(shifted_arr):\n        return True\n\n    # If the shifted array is not sorted, we cannot obtain the sorted array by performing any number of right shift operations\n    return False\n\n# Test cases\nprint(move_one_ball([3, 4, 5, 1, 2]))  # True\nprint(move_one_ball([3, 5, 4, 1, 2]))  # False"}
{"task_id": "HumanEval/110", "completion": "Here is a possible implementation of the `exchange` function:\n"}
{"task_id": "HumanEval/111", "completion": "from collections import Counter\n\ndef histogram(test):\n    \"\"\"Given a string representing space-separated lowercase letters, return a dictionary\n    of the letter(s) with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # Split the string into individual characters and convert it to a lowercase list\n    test_list = [char.lower() for char in test.split()]\n\n    # Count the frequency of each character in the list\n    char_counts = Counter(test_list)\n\n    # Find the maximum frequency of any character\n    max_count = max(char_counts.values())\n\n    # Return a dictionary containing the characters with the maximum frequency and their respective counts\n    return {char: count for char, count in char_counts.items() if count == max_count}"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    # Remove characters from s that are in c\n    result = ''.join(char for char in s if char not in c)\n\n    # Check if result is a palindrome\n    is_palindrome = result == result[::-1]\n\n    return result, is_palindrome"}
{"task_id": "HumanEval/113", "completion": "def count_odd_digits(num):\n    count = 0\n    for digit in num:\n        if int(digit) % 2 != 0:\n            count += 1\n    return count\n\ndef odd_count(lst):\n    output = []\n    for num in lst:\n        odd_count = count_odd_digits(num)\n        output_str = f\"the number of odd elements {odd_count}n the string {len(num)} of the input.\"\n        output.append(output_str)\n    return output\n\n# Test cases\nprint(odd_count(['1234567']))\nprint(odd_count(['3',\"11111111\"]))"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n\n    current_min = nums[0]\n    global_min = nums[0]\n\n    for num in nums[1:]:\n        current_min = min(num, current_min + num)\n        global_min = min(global_min, current_min)\n\n    return global_min"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    rows, cols = len(grid), len(grid[0])\n    filled_buckets = 0\n    total_water = 0\n\n    for row in grid:\n        total_water += sum(row)\n\n    if total_water == 0:\n        return 0\n\n    while total_water > 0:\n        for i in range(rows):\n            filled_buckets = 0\n            for j in range(cols):\n                if grid[i][j] == 1 and filled_buckets < capacity:\n                    grid[i][j] = 0\n                    filled_buckets += 1\n            total_water -= filled_buckets\n\n    return total_water // capacity"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    \"\"\"\n    Sort an array of non-negative integers according to the number of ones in their binary representation.\n    For similar number of ones, sort based on decimal value.\n    \"\"\"\n    # Filter out negative numbers\n    arr = [num for num in arr if num >= 0]\n\n    # Sort the array based on the number of ones in the binary representation and the decimal value\n    arr.sort(key=lambda x: (bin(x).count('1'), x))\n\n    return arr"}
{"task_id": "HumanEval/117", "completion": "import re\n\ndef is_consonant(char):\n    return char.lower() not in {'a', 'e', 'i', 'o', 'u'}\n\ndef select_words(s, n):\n    words = re.findall(r'\\w+', s)\n    result = []\n    for word in words:\n        if sum(map(is_consonant, word)) == n:\n            result.append(word)\n    return result\n\n# Test cases\nassert select_words(\"Mary had a little lamb\", 4) == [\"little\"]\nassert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\nassert select_words(\"simple white space\", 2) == []\nassert select_words(\"Hello world\", 4) == [\"world\"]\nassert select_words(\"Uncle sam\", 3) == [\"Uncle\"]"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = set(\"aeiouAEIOU\")\n    if len(word) < 3:\n        return \"\"\n\n    for i in range(1, len(word)):\n        if word[i - 1] not in vowels and word[i] in vowels and word[i + 1] not in vowels:\n            return word[i]\n\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    def is_balanced(s):\n        stack = []\n        for p in s:\n            if p == '(':\n                stack.append(p)\n            elif p == ')':\n                if not stack or stack.pop() != '(':\n                    return False\n        return not stack\n\n    # Try concatenating the two strings in both orders\n    return is_balanced(lst[0] + lst[1]) or is_balanced(lst[1] + lst[0])\n\n# Test cases\nassert match_parens(['()(', ')']) == 'Yes'\nassert match_parens([')', ')']) == 'No'"}
{"task_id": "HumanEval/120", "completion": "import heapq\n\ndef maximum(arr, k):\n    return heapq.nlargest(k, arr)"}
{"task_id": "HumanEval/121", "completion": "Here is one possible implementation of the `solution` function in Python:\n"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    sum_ = 0\n    for i in range(min(k, len(arr))):\n        if 1 <= arr[i] < 100:\n            sum_ += arr[i]\n    return sum_"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    collatz_seq = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n            collatz_seq.append(n)\n    return sorted([num for num in collatz_seq if num % 2 != 0])"}
{"task_id": "HumanEval/124", "completion": "import re\n\ndef is_leap_year(year):\n    return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)\n\ndef valid_date(date):\n    date_regex = re.compile(r'^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-(19|20)\\d\\d$')\n    if not date or not date_regex.match(date):\n        return False\n\n    month, day, year = map(int, date.split('-'))\n\n    if month < 1 or month > 12:\n        return False\n\n    if day < 1 or (month in [4, 6, 9, 11] and day > 30) or (month in [1, 3, 5, 7, 8, 10, 12] and day > 31):\n        return False\n\n    if month == 2:\n        return is_leap_year(year) and day <= 29 or day <= 28\n\n    return True"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3\n    '''\n    # Split the text on whitespace or commas\n    words = txt.split()\n    if not words:\n        words = txt.split(',')\n    # If no delimiters were found, count the number of lower-case letters with odd order in the alphabet\n    if not words:\n        words = [sum(1 for c in txt if ord(c.lower()) % 2)]\n    return words"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    if len(lst) <= 1:\n        return True\n\n    # Check if the list is sorted\n    if lst == sorted(lst):\n        # Check if there are more than one duplicates\n        if len(lst) > len(set(lst)):\n            return False\n        else:\n            return True\n    else:\n        return False"}
{"task_id": "HumanEval/127", "completion": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n\n    if end1 < start2 or end2 < start1:\n        return \"NO\"\n\n    start = max(start1, start2)\n    end = min(end1, end2)\n\n    if start > end:\n        return \"NO\"\n\n    length = end - start + 1\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n\n    sign_product = 1\n    magnitude_sum = 0\n\n    for num in arr:\n        if num == 0:\n            return 0\n        magnitude_sum += abs(num)\n        sign_product *= (1 if num > 0 else -1)\n\n    return magnitude_sum * sign_product"}
{"task_id": "HumanEval/129", "completion": "import heapq\n\ndef minPath(grid, k):\n    def dfs(i, j, path, count):\n        if count > k:\n            return\n        if count == k:\n            heapq.heappush(paths, path)\n            return\n        for x, y in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]:\n            if 0 <= x < len(grid) and 0 <= y < len(grid[0]) and grid[x][y] not in path:\n                dfs(x, y, path + [grid[x][y]], count + 1)\n\n    paths = []\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            dfs(i, j, [grid[i][j]], 1)\n\n    if not paths:\n        return []\n\n    min_path = heapq.heappop(paths)\n    while paths and paths[0] == min_path:\n        heapq.heappop(paths)\n\n    return min_path"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    \"\"\"\n    This function returns the first n+1 numbers of the Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    \"\"\"\n    result = [None] * (n + 1)\n    result[0] = 1\n    result[1] = 3\n\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            result[i] = 1 + i / 2\n        else:\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1] if i + 1 <= n else None\n            if result[i] is None:\n                raise ValueError(\"Invalid input, n is too small.\")\n\n    return result"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    product = 1\n    n = abs(n)  # make sure n is positive\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    if product == 1:\n        product = 0\n    return product"}
{"task_id": "HumanEval/132", "completion": "Here is one way to solve this problem:\n"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    return sum(int(num)**2 for num in lst)"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n    if txt[-2] != ' ':\n        return False\n    return True"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            return i + 1\n    return -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n\n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n\n    return largest_negative, smallest_positive"}
{"task_id": "HumanEval/137", "completion": "import re\n\ndef compare_one(a, b):\n    # Convert strings to floats if necessary\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n\n    # Compare the values\n    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        # If the values are equal, return None\n        if isinstance(a, (int, float)):\n            return None\n        else:\n            # If the values are equal strings, return the first one\n            return a"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    if n < 8 or n % 2 != 0:\n        return False\n    # Start from the largest possible even number (n/2) and work our way down\n    for a in range(n // 2, 0, -2):\n        for b in range(a - 2, 0, -2):\n            c = n - a - b\n            if c > 0 and c % 2 == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/139", "completion": "import math\n\ndef factorial(n):\n    return math.factorial(n)\n\ndef special_factorial(n):\n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result"}
{"task_id": "HumanEval/140", "completion": "import re\n\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    # Replace 2 or more consecutive spaces with a single dash\n    text = re.sub(r'\\s{2,}', '-', text)\n    # Replace remaining spaces with underscores\n    text = text.replace(' ', '_')\n    return text"}
{"task_id": "HumanEval/141", "completion": "import re\n\ndef file_name_check(file_name):\n    valid_extensions = ['txt', 'exe', 'dll']\n    dot_index = file_name.find('.')\n\n    # Check if there is exactly one dot\n    if dot_index == -1 or file_name.count('.') != 1:\n        return 'No'\n\n    # Check if the substring before the dot is not empty and starts with a letter\n    if len(file_name[:dot_index]) == 0 or not re.match(r'[a-zA-Z]', file_name[:dot_index]):\n        return 'No'\n\n    # Check if the substring after the dot is a valid extension\n    if file_name[dot_index+1:] not in valid_extensions:\n        return 'No'\n\n    # Check if there are more than three digits in the file name\n    if sum(char.isdigit() for char in file_name) > 3:\n        return 'No'\n\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    total = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0 and i % 4 != 0:\n            total += num ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += num ** 3\n        else:\n            total += num\n    return total"}
{"task_id": "HumanEval/143", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return ' '.join(result)"}
{"task_id": "HumanEval/144", "completion": "from fractions import Fraction\n\ndef simplify(x, n):\n    # Convert string fractions to Fraction objects\n    frac_x = Fraction(x)\n    frac_n = Fraction(n)\n\n    # Multiply the two fractions\n    result = frac_x * frac_n\n\n    # Check if the result is a whole number\n    return result.denominator == 1"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(abs(n)))\n\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))\n\n# Test cases\nassert order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\nassert order_by_points([]) == []"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            first_digit = num // 10\n            last_digit = num % 10\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count\n\n# Test cases\nprint(specialFilter([15, -73, 14, -15]))  # 1\nprint(specialFilter([33, -2, -3, 45, 21, 109]))  # 2"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\n# Test the function\nn = 5\nprint(get_max_triples(n))  # Output: 1"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    # Define a list of planets in order of their proximity to the Sun\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n\n    # Find the indices of the input planets in the list\n    index1 = planets.index(planet1) if planet1 in planets else -1\n    index2 = planets.index(planet2) if planet2 in planets else -1\n\n    # If either input is not a valid planet name, return an empty tuple\n    if index1 == -1 or index2 == -1:\n        return ()\n\n    # Return a tuple containing all planets whose orbits are located between the orbit of planet1 and planet2\n    return tuple(planets[index1+1:index2])"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    \"\"\"\n    This function accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order.\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word,\n    and if two words have the same length, the list should be sorted alphabetically.\n    \"\"\"\n    # Filter out strings with odd lengths\n    filtered_lst = [word for word in lst if len(word) % 2 == 0]\n    # Sort the filtered list by length and then alphabetically\n    sorted_lst = sorted(filtered_lst, key=len)\n    sorted_lst = sorted(sorted_lst, key=lambda x: x.lower())\n    return sorted_lst"}
{"task_id": "HumanEval/150", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\n\n    If the input list is empty, return 0.\n    '''\n    total = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0 and num % 2 != 0:\n            total += num**2\n    return total"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    result = []\n    for i in range(len(game)):\n        difference = abs(game[i] - guess[i])\n        result.append(difference)\n    return result"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    max_strength = float('-inf')\n    strongest_extension = None\n\n    for extension in extensions:\n        strength = sum(1 for char in extension if char.isupper()) - sum(1 for char in extension if char.islower())\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n\n    if strongest_extension:\n        return f'{class_name}.{strongest_extension}'\n    else:\n        return None"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    a_len = len(a)\n    b_len = len(b)\n\n    if b_len > a_len:\n        return False\n\n    for i in range(b_len):\n        rotated_b = b[i:] + b[:i]\n        if rotated_b in a:\n            return True\n\n    return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    if num == 0:\n        return (1, 0)\n    num = abs(num)  # Ensuring the number is positive\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    roman_str = ''\n    for i in reversed(range(len(roman_dict))):\n        while number >= roman_dict[roman_dict.keys()[i]]:\n            number -= roman_dict[roman_dict.keys()[i]]\n            roman_str += roman_dict.keys()[i]\n            if number >= roman_dict[roman_dict.keys()[i+1]] * 2:\n                roman_str += roman_dict.keys()[i+1]\n    return roman_str.lower()"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or 90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Sort the sides to ensure that a, b, and c are in non-decreasing order\n    a, b, c = sorted([a, b, c])\n\n    # Check if the longest side (c) squared is equal to the sum of the squares of the other two sides (a and b)\n    return c**2 == a**2 + b**2"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_len = 0\n    result = \"\"\n    for word in words:\n        if len(set(word)) > max_len or (len(set(word)) == max_len and word < result):\n            max_len = len(set(word))\n            result = word\n    return result"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    total_eaten = number + min(remaining, need)\n    carrots_left = max(0, remaining - need)\n    return [total_eaten, carrots_left]"}
{"task_id": "HumanEval/160", "completion": "Here is one possible implementation of the `do_algebra` function:\n"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    result = []\n    for char in s:\n        if char.isalpha():\n            result.append(char.swapcase())\n        else:\n            result.append(char)\n    if not any(char.isalpha() for char in s):\n        result.reverse()\n    return ''.join(result)"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '5eb63bbbe01eeed093cb22bb8f5acdc3'\n    \"\"\"\n    if not text:\n        return None\n\n    md5_hash = hashlib.md5(text.encode('utf-8')).hexdigest()\n    return md5_hash\n\n# Test the function\nprint(string_to_md5('Hello world'))"}
{"task_id": "HumanEval/163", "completion": "def generate_even_digits(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_even_digits(2, 8) => [2, 4, 6, 8]\n    generate_even_digits(8, 2) => [2, 4, 6, 8]\n    generate_even_digits(10, 14) => []\n    \"\"\"\n    # If a > b, swap the values\n    if a > b:\n        a, b = b, a\n\n    even_digits = []\n    # Iterate through numbers from a to b\n    for num in range(a, b+1):\n        # Check if the number is even\n        if num % 2 == 0:\n            # Extract the digits of the number\n            digits = [int(digit) for digit in str(num)]\n            # Check if all digits are even\n            if all(digit % 2 == 0 for digit in digits):\n                even_digits.append(num)\n\n    return even_digits"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # Create a frequency dictionary to store the count of each integer in the list\n    freq_dict = {}\n    for num in lst:\n        if num not in freq_dict:\n            freq_dict[num] = 0\n        freq_dict[num] += 1\n\n    # Iterate through the frequency dictionary in reverse order of keys (i.e., from largest to smallest)\n    for num, freq in sorted(freq_dict.items(), reverse=True):\n        # If the frequency of the current integer is greater than or equal to the value of the integer, return it\n        if freq >= num:\n            return num\n\n    # If no such integer is found, return -1\n    return -1"}
